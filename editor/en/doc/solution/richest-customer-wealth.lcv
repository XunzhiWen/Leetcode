## Video Solution

---

<div> 
 <div class="video-container"> 
  <iframe src="https://player.vimeo.com/video/722306580?texttrack=en-x-autogenerated" frameborder="0" allow="autoplay; fullscreen"></iframe> 
 </div> 
</div>

## Solution

--- 

### Overview

There are $M$ customers and each of them has some money deposited in $N$ number of banks. The goal is to find the wealth of the richest customer. To determine which customer is the richest, we must find the sum of money that each customer has across all of their bank accounts i.e., each customer's total wealth.
</br>

--- 

### Approach 1: Row Sum Maximum

**Intuition**

We know the amount of money that each customer has in each of the $N$ banks. The total wealth of a customer is the sum of all the money that he/she has in all the banks. As an example, the table below shows three customers, the money each of them has in the $4$ banks, and their total wealth. Once we have the total wealth for each customer, we can compare them and return the highest total.

![fig](https://leetcode.com/problems/richest-customer-wealth/solution/../Figures/1672/1672A.png)

The solution described above can be broken down into two steps:
- Find the wealth of each customer and store it in a list.
- Find and return the greatest wealth contained in the list.

We can change it to a single-step solution. Instead of storing the wealth in a list, we can keep a variable `maxWealthSoFar`. It will store the highest wealth we have seen so far and it will be initialized to $0$ because that's the minimum wealth possible. This way we can find the highest wealth by comparing just after calculating it instead of first storing in a list.

**Algorithm**

1. Iterate over the customers i.e., `accounts`.
2. For each `account` in `accounts`, we iterate over the money deposited in different banks and add it to `currCustomerWealth`.
3. Compare `currCustomerWealth` with `maxWealthSoFar`. If `currCustomerWealth` is greater than `maxWealthSoFar` then update `maxWealthSoFar`.
4. Return `maxWealthSoFar`.

**Implementation**

<iframe src="https://leetcode.com/playground/AhdMWVSP/shared" frameBorder="0" width="100%" height="446" name="AhdMWVSP"></iframe>

**Complexity Analysis**

Let $M$ be the number of customers and $N$ be the number of banks.

* Time complexity: $O(M \cdot N)$

  For each of the $M$ customers, we need to iterate over all $N$ banks to find the sum of his/her wealth. Inside each iteration, operations like addition or finding maximum take $O(1)$ time. Hence, the total time complexity is $O(M \cdot N)$.

* Space complexity: $O(1)$

  We only need two variables `currCustomerWealth` and `maxWealthSoFar` to store the wealth of the current customer, and the highest wealth we have seen so far respectively. Therefore, the space complexity is constant.

<br />

---

